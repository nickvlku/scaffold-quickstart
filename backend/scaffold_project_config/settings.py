"""
Django settings for scaffold_project_config project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
from pathlib import Path
from dotenv import load_dotenv
from datetime import timedelta


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file from BASE_DIR (which is backend/)
load_dotenv(BASE_DIR / '.env.django') 

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False').lower() in ('true', '1', 't') # Default to False if not set

ALLOWED_HOSTS_STRING = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1')
ALLOWED_HOSTS = [host.strip() for host in ALLOWED_HOSTS_STRING.split(',')]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
#    'django.contrib.auth',  Default Auth, User model specified in AUTH_USER_MODEL
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    
    # Our apps - users MUST come before auth if you want admin to pick it up easily
    # and generally before anything that might depend on the user model early.
    'apps.users.apps.UsersConfig', # Use AppConfig for better app management
    'apps.common.apps.CommonConfig',

    # Third-party apps
    'rest_framework',
    'rest_framework.authtoken', # Required by dj_rest_auth if not using JWT exclusively
    'dj_rest_auth',
    'dj_rest_auth.registration', # Enables registration endpoints

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # Example: Google provider

    'corsheaders',
    'django.contrib.auth', # Standard auth app, but after our user model is defined


]

# Specify the custom user model
AUTH_USER_MODEL = 'users.User' # app_label.ModelName

AUTHENTICATION_BACKENDS = (
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
)

SITE_ID = 1 # Required by django-allauth

# ALLAUTH Account settings
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # We use email
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory' # Or 'optional' or 'none'
ACCOUNT_ADAPTER = 'apps.users.adapter.CustomAccountAdapter' # If custom adapter is needed
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[Your Site] '

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.SessionAuthentication', # Optional: if you also want session auth for browsable API
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication', # Use JWT Cookie Authentication
    ),
    # Add other DRF settings like pagination, renderers, etc., as needed later
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     'rest_framework.permissions.IsAuthenticatedOrReadOnly',
    # ],
}

# dj_rest_auth Settings
REST_AUTH = { # Django Rest Auth (dj_rest_auth) settings
    'USE_JWT': True,
    'JWT_AUTH_COOKIE': 'my-app-auth',                   # Name of the cookie for the access token
    'JWT_AUTH_REFRESH_COOKIE': 'my-app-refresh-token',  # Name of the cookie for the refresh token
    'JWT_AUTH_HTTPONLY': True,                          # True: HttpOnly flag for cookies (recommended)
                                                        # False: Frontend JS can access cookie (less secure)
    'JWT_AUTH_SAMESITE': 'Lax',                         # 'Lax', 'Strict', or 'None' (use 'None' with Secure=True for cross-site)
    # JWT_AUTH_SECURE: True # Should be True in Production over HTTPS
                            # Set based on an environment variable or DEBUG status
    'JWT_AUTH_RETURN_EXPIRATION': True, # Include expiration in the login response
    'OLD_PASSWORD_FIELD_ENABLED': True, # For password change endpoint
    'LOGOUT_ON_PASSWORD_CHANGE': True,  # Invalidate sessions on password change
    
    # Serializers - if you need to customize login/registration behavior later
    # 'LOGIN_SERIALIZER': 'dj_rest_auth.serializers.LoginSerializer',
    # 'REGISTER_SERIALIZER': 'dj_rest_auth.registration.serializers.RegisterSerializer',
    # 'USER_DETAILS_SERIALIZER': 'dj_rest_auth.serializers.UserDetailsSerializer', # We might customize this
}
# Determine JWT_AUTH_SECURE based on DEBUG or an environment variable
REST_AUTH['JWT_AUTH_SECURE'] = not DEBUG # True if not DEBUG, False if DEBUG



SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # e.g., 1 hour
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),    # e.g., 1 week
    'ROTATE_REFRESH_TOKENS': True, # When a refresh token is used, a new one is issued
    'BLACKLIST_AFTER_ROTATION': True, # Blacklists the old refresh token
    'UPDATE_LAST_LOGIN': True,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses Django's SECRET_KEY
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # For Authorization header if not using cookies exclusively
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id', # Corresponds to our User.id (SemanticIDField)
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Not used if not using sliding tokens
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Not used if not using sliding tokens
}

# django-allauth specific settings
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Login with email
ACCOUNT_EMAIL_REQUIRED = True           # Email is required
ACCOUNT_UNIQUE_EMAIL = True             # Email must be unique
ACCOUNT_USERNAME_REQUIRED = False       # We are not using usernames
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # Tells allauth not to look for a username field for its forms/logic
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Or 'mandatory' or 'none'. 'optional' is good for dev.
                                        # 'mandatory' requires email confirmation before login.
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True # Logs user in after email confirmation
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[MyScaffoldApp] ' # For emails sent by allauth

# Social Auth settings (example for Google)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        'APP': {
            # These will come from environment variables for security
            # 'client_id': os.getenv('GOOGLE_OAUTH_CLIENT_ID'),
            # 'secret': os.getenv('GOOGLE_OAUTH_SECRET_KEY'),
            # 'key': '' # if any
        },
        'SCOPE': [ # What permissions to request from Google
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}
# Add placeholders in your .env.django for these
# GOOGLE_OAUTH_CLIENT_ID=your_google_client_id
# GOOGLE_OAUTH_SECRET_KEY=your_google_secret_key

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'scaffold_project_config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'scaffold_project_config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / os.getenv('SQLITE_DB_NAME', 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# CORS Configuration
CORS_ALLOWED_ORIGINS_STRING = os.getenv('CORS_ALLOWED_ORIGINS', 'http://localhost:3000') # Default for Next.js dev
CORS_ALLOWED_ORIGINS = [origin.strip() for origin in CORS_ALLOWED_ORIGINS_STRING.split(',')]

# If you want to allow all origins during early development (less secure):
# CORS_ALLOW_ALL_ORIGINS = DEBUG # Only allow all if DEBUG is True

# Important for HttpOnly cookies to be sent cross-origin
CORS_ALLOW_CREDENTIALS = True


# Email Configuration
EMAIL_BACKEND = os.getenv('EMAIL_BACKEND', 'django.core.mail.backends.console.EmailBackend')
EMAIL_HOST = os.getenv('EMAIL_HOST')
EMAIL_PORT = int(os.getenv('EMAIL_PORT', 587)) # Default to 587 if not set
EMAIL_USE_TLS = os.getenv('EMAIL_USE_TLS', 'True').lower() in ('true', '1', 't')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL', 'webmaster@localhost')